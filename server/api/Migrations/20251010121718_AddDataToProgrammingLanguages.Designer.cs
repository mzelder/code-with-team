// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using api.Data;

#nullable disable

namespace api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251010121718_AddDataToProgrammingLanguages")]
    partial class AddDataToProgrammingLanguages
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("api.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Web Dev"
                        });
                });

            modelBuilder.Entity("api.Models.Lobby", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Lobbies");
                });

            modelBuilder.Entity("api.Models.LobbyMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("JoinedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int?>("LobbyId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("UserSelectionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LobbyId");

                    b.HasIndex("UserId");

                    b.ToTable("LobbyMembers");
                });

            modelBuilder.Entity("api.Models.ProgrammingLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("ProgrammingLanguages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "JavaScript",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Python",
                            RoleId = 2
                        },
                        new
                        {
                            Id = 3,
                            Name = "Python",
                            RoleId = 3
                        },
                        new
                        {
                            Id = 4,
                            Name = "Standard",
                            RoleId = 4
                        });
                });

            modelBuilder.Entity("api.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Name = "Frontend"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            Name = "Backend"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            Name = "QA"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 1,
                            Name = "PM"
                        });
                });

            modelBuilder.Entity("api.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("api.Models.UserLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ProgrammingLanguageId")
                        .HasColumnType("int");

                    b.Property<int>("UserSelectionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProgrammingLanguageId");

                    b.HasIndex("UserSelectionId");

                    b.ToTable("UserLanguages");
                });

            modelBuilder.Entity("api.Models.UserSelection", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSelections");
                });

            modelBuilder.Entity("api.Models.LobbyMember", b =>
                {
                    b.HasOne("api.Models.Lobby", "Lobby")
                        .WithMany()
                        .HasForeignKey("LobbyId");

                    b.HasOne("api.Models.User", "User")
                        .WithMany("LobbbyQueues")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Lobby");

                    b.Navigation("User");
                });

            modelBuilder.Entity("api.Models.ProgrammingLanguage", b =>
                {
                    b.HasOne("api.Models.Role", "Role")
                        .WithMany("ProgrammingLanguages")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("api.Models.Role", b =>
                {
                    b.HasOne("api.Models.Category", "Category")
                        .WithMany("Roles")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("api.Models.UserLanguage", b =>
                {
                    b.HasOne("api.Models.ProgrammingLanguage", "ProgrammingLanguage")
                        .WithMany("UserLanguages")
                        .HasForeignKey("ProgrammingLanguageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("api.Models.UserSelection", "UserSelection")
                        .WithMany("UserLanguages")
                        .HasForeignKey("UserSelectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProgrammingLanguage");

                    b.Navigation("UserSelection");
                });

            modelBuilder.Entity("api.Models.UserSelection", b =>
                {
                    b.HasOne("api.Models.Category", "Category")
                        .WithMany("UserSelections")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("api.Models.LobbyMember", "LobbyQueue")
                        .WithOne("UserSelection")
                        .HasForeignKey("api.Models.UserSelection", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.Role", "Role")
                        .WithMany("UserSelections")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("api.Models.User", "User")
                        .WithMany("UserSelections")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("LobbyQueue");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("api.Models.Category", b =>
                {
                    b.Navigation("Roles");

                    b.Navigation("UserSelections");
                });

            modelBuilder.Entity("api.Models.LobbyMember", b =>
                {
                    b.Navigation("UserSelection")
                        .IsRequired();
                });

            modelBuilder.Entity("api.Models.ProgrammingLanguage", b =>
                {
                    b.Navigation("UserLanguages");
                });

            modelBuilder.Entity("api.Models.Role", b =>
                {
                    b.Navigation("ProgrammingLanguages");

                    b.Navigation("UserSelections");
                });

            modelBuilder.Entity("api.Models.User", b =>
                {
                    b.Navigation("LobbbyQueues");

                    b.Navigation("UserSelections");
                });

            modelBuilder.Entity("api.Models.UserSelection", b =>
                {
                    b.Navigation("UserLanguages");
                });
#pragma warning restore 612, 618
        }
    }
}
